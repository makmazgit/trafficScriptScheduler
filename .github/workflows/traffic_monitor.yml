name: Traffic Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:  # Manual trigger
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the workflow with debug logging'
        required: false
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  collect-traffic-data:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create necessary directories
      run: |
        mkdir -p logs database backups
        
    - name: Download previous database
      continue-on-error: true  # Continue if no previous artifact exists
      uses: actions/download-artifact@v4
      with:
        name: route-data
        path: database
        
    - name: Run traffic data collection
      env:
        TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}
      run: |
        echo "Starting data collection at $(date)"
        python -c "
        from src.api.tomtom_client import TomTomClient
        from src.database.models import SessionLocal
        from src.database.operations import save_route_info
        from src.config import ROUTES
        import shutil
        from datetime import datetime
        import pandas as pd
        import sqlite3
        
        def collect_data():
            client = TomTomClient()
            db = SessionLocal()
            try:
                for route in ROUTES:
                    print(f'Collecting data for route: {route[\"name\"]}')
                    route_info = client.get_route_info(
                        from_coords=route['from_coords'],
                        to_coords=route['to_coords']
                    )
                    if route_info:
                        save_route_info(
                            db=db,
                            route_data=route_info,
                            from_coords=route['from_coords'],
                            to_coords=route['to_coords']
                        )
                        print(f'Successfully saved route data for {route[\"name\"]}')
            finally:
                db.close()

        # Collect new data
        collect_data()
        
        # Create timestamped backup
        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
        backup_db = f'backups/routes_{timestamp}.db'
        shutil.copy2('database/routes.db', backup_db)
        
        # Export to CSV
        conn = sqlite3.connect('database/routes.db')
        df = pd.read_sql_query('SELECT * FROM route_info', conn)
        csv_file = f'backups/routes_{timestamp}.csv'
        df.to_csv(csv_file, index=False)
        conn.close()
        "
        echo "Completed data collection at $(date)"
        
    - name: Upload current database
      uses: actions/upload-artifact@v4
      with:
        name: route-data
        path: database/routes.db
        retention-days: 7
        
    - name: Upload backup files
      uses: actions/upload-artifact@v4
      with:
        name: route-data-backup-${{ github.run_number }}
        path: |
          backups/routes_*.db
          backups/routes_*.csv
        retention-days: 7 